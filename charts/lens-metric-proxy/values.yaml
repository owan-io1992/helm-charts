# Default values for lens-metric-proxy.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /health
    port: http
readinessProbe:
  httpGet:
    path: /health
    port: http

volumes: 
  - name: config
    configMap:
      name: '{{ include "lens-metric-proxy.fullname" . }}'

volumeMounts: 
  - name: config
    mountPath: /etc/nginx/nginx.conf
    subPath: nginx.conf
  - name: config
    mountPath: /etc/nginx/templates/prometheus.conf.template
    subPath: prometheus.conf.template

nodeSelector: {}

tolerations: []

affinity: {}

config:
  nginx_conf: |
    user  nginx;
    worker_processes  auto;

    error_log  /var/log/nginx/error.log notice;
    pid        /var/run/nginx.pid;


    events {
        worker_connections  1024;
    }


    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for" "$request_body"';

        access_log  /var/log/nginx/access.log  main;

        sendfile        on;
        #tcp_nopush     on;

        keepalive_timeout  65;

        #gzip  on;

        include /etc/nginx/conf.d/*.conf;
    }

  prometheus_conf_template: |
    server {
        listen 80 default_server;

        proxy_connect_timeout       300;
        proxy_send_timeout          300;
        proxy_read_timeout          300;
        send_timeout                300;
        resolver 1.1.1.1;
        location /health {
            return 200;
        }
        location / {
            proxy_pass http://$MIMIR_HOST/prometheus$request_uri;
            # proxy_set_header X-Scope-OrgID "$MIMIR_TENANT";
        }

    }

env:
  - name: "PROMETHEUS_HOST"
    value: ""
  # - name: "MIMIR_TENANT"
  #   value: ""
